Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до практичної роботи номер 2 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Методи рефакторингу коду програмного забезпечення"



Виконала ст. гр ПЗПІ-22-4
Герасимова Владислава Андріївна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович



Харків 2024
МЕТА
	Вивчити основні методи рефакторингу коду на основі реальних прикладів, навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

ВСТУП
Рефакторинг — це процес покращення структури існуючого коду без зміни його зовнішньої поведінки або функціональності. 
Мета рефакторингу полягає в тому, щоб зробити код більш читабельним, зрозумілим, та ефективним, спростити його підтримку та подальший розвиток.
	Займатися рефакторингом треба в наступних ситуаціях:
•	Під час додавання нових функцій. Якщо при додаванні нових функцій ви розумієте, що існуючий код є незрозумілим, його важко розширювати чи ви повторюєте окремі ділянки коду, варто провести рефакторинг.
•	При виправленні багів. Інколи баги можуть бути спричинені поганою організацією кода, часто викликаною неуважністю програміста. В такому разі варто провести рефакторинг щоб вирішити поточні проблеми та запобігти їх появі у майбутньому.
•	Коли є час. У програмі наближеній до комерційного розміру та складності завжди є код, який модна оптимізувати, спростити чи покращити, тому займатися рефакторингом коду час від часу є дуже корисною практикою.
Для вивчення під час виконання практичної роботи було обрано наступні три методи:
1. Pull Up Constructor Body
2. Remove Parameter
3. Split Temporary Variable 
МЕТОДИ РЕФАКТОРИНГУ КОДУ

1. Pull up constructor body (Підняття тіла конструктора)
Опис: цей метод рефакторингу використовується для зниження повторюваності коду і робить це шляхом перенесення спільної функціональності в конструкторах класів-нащадків (наприклад, ініціалізація одного і того ж поля) вище по ієрархії до конструктору батьківського класу.
Кроки рефакторингу:
1.	Визначте загальні частини коду конструкторів
2.	Перемістить код до батьківського класу
3.	Видаліть зайвий код з конструкторів дочірніх класів
4.	Протестуйте програму
Приклад:
//поганий приклад
public class Result
{
    public bool IsSuccessful { get; set; }

    public Result() { }

    public Result(bool isSuccessful)
    {
        IsSuccessful = isSuccessful;
    }
}

public class Result<T> : Result where T : class
{
    public T Data { get; }

    public Result(bool isSuccessful, T data = null)
    {
        IsSuccessful = isSuccessful;
        Data = data;
    }
}

//виправлений приклад
public class Result
{
    public bool IsSuccessful { get; set; }

    public Result() { }

    public Result(bool isSuccessful)
    {
        IsSuccessful = isSuccessful;
    }
}

public class Result<T> : Result where T : class
{
    public T Data { get; }

    public Result(bool isSuccessful, T data = null) 
        : base(isSuccessful)
    {
        Data = data;
    }
}

Задання значення поля IsSuccessful є і в конструкторі суперкласу, і в конструкторі класу-нащадку, тому його можна прибрати з конструктору дочірнього класу і замінити на виклик базового конструктор у батьківському класі, який потребує цей аргумент. 

2. Remove Parameter (Видалення зайвого параметру)
Опис: цей метод рефакторингу використовується для того, щоб зробити код чистішим, простішим та менш схильним до помилок. Він передбачає видалення параметрів з методів та функцій після того, як вони стали непотрібними в результаті зміни функціональності методу чи через появу іншого шляху отримання відповідних даних (наприклад їх інкапсуляція у класі чи винесення як глобальних змінних).
Кроки рефакторингу:
1.	Перевірте, чи всі параметри методу використовуються
2.	Оголосіть новий метод без зайвих параметрів
3.	Скопіюйте код до нового методу
4.	Замініть код старого методу на виклик нового
5.	Протестуйте програму
6.	Замініть всі виклики старого методу на виклики нового
7.	Протестуйте програму 
8.	Видаліть старий метод
Приклад:
//поганий приклад
public async Task<Result> ChangeOwner
    (Artwork artwork, string oldOwnerId, string newOwnerId)
{
    if (artwork == null)
    {
        //Logging logic
        return new Result(false);
    }
    if (string.IsNullOrEmpty(newOwnerId))
    {
        //Logging logic
        return new Result(false);
    }

    try
    {
        artwork.OwnerId = newOwnerId;

        //DB logic
        //Logging logic

        return new Result(true);
    }
    catch (Exception ex)
    {
        //Logging logic
        return new Result(false);
    }
}

//виправлений приклад
public async Task<Result> ChangeOwner(Artwork artwork, string newOwnerId)
{
    if (artwork == null)
    {
        //Logging logic
        return new Result(false);
    }
    if (string.IsNullOrEmpty(newOwnerId))
    {
        //Logging logic
        return new Result(false);
    }

    try
    {
        artwork.OwnerId = newOwnerId;

        //DB logic
        //Logging logic

        return new Result(true);
    }
    catch (Exception ex)
    {
        //Logging logic
        return new Result(false);
    }
}

Раніше, логіка по перевірці, що витвір мистецтва (Artwork) належить певному користувачу (oldOwnerId співпадає з наданим) дублювалася в методі ChangeOwner. Після видалення цього дублювання параметр oldOwnerId більше не потрібен, тому його треба видалити.

3. Split Temporary Variable (Розділення тимчасової змінної)
Опис: цей метод рефакторингу використовується для запобігання плутанини та помилок, а також для того, щоб зробити код більш зрозумілішим. Він передбачає створення окремих змінних для кожного тимчасового використання, таким чином специфікуючи окрему єдину ціль існування кожної з них.
Кроки рефакторингу:
1.	Змініть ім'я тимчасової змінної, якщо воно не відповідає першому випадку її використання
2.	Замість повторного використання змінної оголосіть нову
3.	Повторюйте пункти 1-2 поки потрібно
4.	Перевірте, чи є можливим зменшити області видимості кожної окремої тимчасової змінної, перемістивши її по коду; якщо це можливо – зробіть це
5.	Протестуйте програму
Приклад: 
//поганий приклад
static void Main(string[] args)
{
    string input;
    bool isRunning = true;

    while (isRunning)
    {
        input = Console.ReadLine();

        switch (input)
        {
            case "fcreate":
                var file = new File();

                input = Console.ReadLine(); //getting file name
                //check if name is available logic
                file.FileName = input;

                input = Console.ReadLine(); //getting file size
                int fileSize;
                if (int.TryParse(input, out fileSize))
                {
                    //check if size is OK logic
                    file.FileSize = fileSize;
                } 
                else
                {
                    //notify user logic
                }
                        
                //...
                break;
            //...
        }
    }
}

//виправлений приклад
static void Main(string[] args)
{
    bool isRunning = true;

    while (isRunning)
    {
        var command = Console.ReadLine();

        switch (command)
        {
            case "fcreate":
                var file = new File();

                var fileName = Console.ReadLine(); //getting file name
                //check if name is available logic
                file.FileName = fileName;

                var fileSizeStr = Console.ReadLine(); //getting file size
                int fileSize;
                if (int.TryParse(fileSizeStr, out fileSize))
                {
                    //check if size is OK logic
                    file.FileSize = fileSize;
                } 
                else
                {
                    //notify user logic
                }
                        
                //...
                break;
            //...
        }
    }
}

Змінна input приймає в себе весь користувацький ввід, що може призвести до непорозумінь та помилок. Тому її було розділено на окремі змінні для кожного користувацького вводу: command для користувацької команди, fileName для назви створюваного файлу та fileSizeStr для розміру створюваного файлу.
 
ІНСТРУМЕНТИ РЕФАКТОРИНГУ

1. Інтегровані засоби рефакторингу в IDE
Багато сучасних IDE мають вбудовані засоби для автоматизації рефакторингу коду.
Visual Studio (C#, C++, VB.NET, JavaScript тощо) надає засоби рефакторингу для .NET:
•	Rename для безпечного перейменування елементів.
•	Extract Method/Variable для покращення структури коду.
•	Encapsulate Field для перетворення поля на властивість.
•	Remove Unused References для видалення невикористаних залежностей.
IntelliJ IDEA (Java, Kotlin, JavaScript, PHP, Python тощо) пропонує потужний набір інструментів для рефакторингу, зокрема:
•	Rename – перейменування змінних, методів, класів.
•	Extract Method/Variable – виділення коду в новий метод або змінну.
•	Inline Method/Variable – вбудовування методу або змінної в код.
•	Change Signature – зміна сигнатури методу (параметрів і типів).
•	Safe Delete – безпечне видалення змінних, методів і класів.
Інструменти рефакторингу в Eclipse (Java, C++, Python, PHP тощо) надають подібний набір функцій:
•	Rename і Move для елементів коду.
•	Extract Method/Variable/Constant для виділення коду в нові компоненти.
•	Change Method Signature для зміни параметрів методу.
•	Encapsulate Field для автоматичного створення геттерів і сеттерів.
2. Статичні аналізатори коду з функціями рефакторингу
Статичні аналізатори коду з функціями рефакторингу аналізують код і пропонують автоматичні виправлення або оптимізації.
SonarQube (Java, C#, Python, JavaScript, PHP тощо) виконує статичний аналіз коду, виявляє дублювання, складність, потенційні помилки та дає рекомендації щодо рефакторингу. Він інтегрується в процес CI/CD і автоматично аналізує код у системах контролю версій.
ReSharper (C#, VB.NET, ASP.NET, JavaScript) – це розширення для Visual Studio, яке надає розширені функції рефакторингу, які включають Code Cleanup для автоматичного очищення та форматування коду, такі методи рефакторингу, як Rename, Extract Method, Introduce Variable/Constant, а також інспекцію коду та пропозиції щодо рефакторингу.
PMD виконує статичний аналіз Java-коду, виявляє дублювання, порушення стилю та рекомендує покращення структури. Він інтегрується в більшість популярних середовищ CI/CD.

3. Окремі інструменти для конкретних мов
Black є інструментом автоматичного форматування та рефакторингу коду Python. Він автоматично виправляє форматування, щоб забезпечити послідовність і зрозумілість коду.
Prettier (JavaScript, TypeScript, CSS, HTML) – це інструмент для автоматичного форматування коду, який допомагає підтримувати єдиний стиль кодування. Він також може застосовуватися до рефакторингу стилю і структури коду.
Clang-Tidy – це інструмент статичного аналізу та рефакторингу для C/C++. Він виявляє потенційні помилки, порушення стилю коду і може пропонувати автоматичні виправлення. 
ВИСНОВКИ

Підводячи підсумки проведеної роботи, хочеться зазначити що рефакторинг коду є надзвичайно важливою та невід’ємною частиною розробки програмного забезпечення з декількох причин:
1. Підтримка чистого та організованого коду.  Своєчасний та грамотний рефакторинг дозволяє зберігати код зрозумілим та легким для підримки та розширення, що стає ще важливіше при роботі в команді.
2. Зменшення технічного боргу. Постійний рефакторинг знижує накопичення технічного боргу, що забезпечує довгострокову стабільність та надійність проекту, а також запобігає подальшій потребі перероблювати великі об’єми коду в заздалегідь заплутаній системі.
3. Збільшення продуктивності коду. Після грамотного рефакторингу та оптимізації код працюватиме ефективніше та продуктивніше.
4. Збільшення продуктивності та швидкості роботи команди. Не дивлячись на те, що проведення рефакторингу зазвичай потребує додаткового часу, в широкому сенсі він прискорює подальшу розробку, оскільки значно зменшує час, які програмісти, що із ним працюють, витрачають на його аналіз та розуміння. Це особливо помітно за умов появи нових людей в команді чи розширенні наявного функціоналу через певний час після попереднього релізу.
Використовуючи методи рефакторингу краще притримуватися наступних рекомендацій:
1. Рефакторинг потрібно проводити поступово, роблячи невеликі зміни, які легко протестувати та, за потреби, відкорегувати.
2. Перед рефакторингом відповідну ділянку коду треба покрити достатньою кількістю тестів щоб впевнитися, що після корегування коду його функціональність не змінилася.
3. Рефакторинг треба виконувати регулярно, оскільки чим більше його відкладати, тим складніше отриманий важкий для зрозуміння код буде відкоригувати у майбутньому.	
	
 
ДОДАТОК А
Список використаних джерел

1. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999. – 464 p. 

ДОДАТОК Б
Відео на YouTube 

https://youtu.be/k1HDLTXmUxM
 
ДОДАТОК В
Презентація

                     
